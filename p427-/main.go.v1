// v1
package main

import (
	"bufio"
	"container/heap"
	"io"
	"log"
	"os"
	"sort"
	"strconv"
	"unsafe"
)

func solve(n int, a, b, c int) int {
	vs := []int{a, b, c}
	sort.Ints(vs)

	for i := 1; i < len(vs); i++ {
		for j := 0; j < i; j++ {
			if vs[i]%vs[j] == 0 {
				copy(vs[i:], vs[i+1:])
				vs = vs[:len(vs)-1]
				i--
				break
			}
		}
	}

	// if len(vs) == 1 {
	// 	count := (n-1)/vs[0] + 1
	// 	writeInt(bw, count, writeOpts{end: '\n'})
	// 	return nil
	// }

	d := vs[0]
	for i := 1; i < len(vs); i++ {
		d = gcd(d, vs[i])
	}

	w := vs[len(vs)-1]
	k := w / d
	q := make(IntHeap, 0, k)
	m := make(map[int]struct{}, k)

	heap.Push(&q, 0)
	m[0] = struct{}{}
	count := 1

	for q.Len() < k {
		i := q[0]
		delete(m, i)
		var flag bool
		for _, v := range vs {
			v += i
			if v >= n {
				continue
			}
			flag = true
			if _, ok := m[v]; !ok {
				heap.Push(&q, v)
				m[v] = struct{}{}
				count++
			}
		}
		if !flag {
			break
		}
		heap.Pop(&q)
	}

	if nn :=  n - (q[0] + w); nn > 0 {
		count += (nn + d - 1) / d
	}
	return count
}

func gcd(a, b int) int {
	for a > 0 {
		a, b = b%a, a
	}
	return b
}

func run(in io.Reader, out io.Writer) error {
	sc := bufio.NewScanner(in)
	sc.Split(bufio.ScanWords)
	bw := bufio.NewWriter(out)
	defer bw.Flush()

	n, a, b, c, err := scanFourInt(sc)
	if err != nil {
		return err
	}

	count := solve(n, a, b, c)
	writeInt(bw, count, writeOpts{end: '\n'})

	return nil
}

// An IntHeap is a min-heap of ints.
type IntHeap []int

func (h IntHeap) Len() int           { return len(h) }
func (h IntHeap) Less(i, j int) bool { return h[i] < h[j] }
func (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *IntHeap) Push(x any) {
	// Push and Pop use pointer receivers because they modify the slice's length,
	// not just its contents.
	*h = append(*h, x.(int))
}

func (h *IntHeap) Pop() any {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}

// ----------------------------------------------------------------------------

func unsafeString(b []byte) string {
	return *(*string)(unsafe.Pointer(&b))
}

func scanInt(sc *bufio.Scanner) (int, error) {
	sc.Scan()
	return strconv.Atoi(unsafeString(sc.Bytes()))
}

func scanTwoInt(sc *bufio.Scanner) (v1, v2 int, err error) {
	v1, err = scanInt(sc)
	if err == nil {
		v2, err = scanInt(sc)
	}
	return v1, v2, err
}

func scanThreeInt(sc *bufio.Scanner) (v1, v2, v3 int, err error) {
	v1, err = scanInt(sc)
	if err == nil {
		v2, err = scanInt(sc)
	}
	if err == nil {
		v3, err = scanInt(sc)
	}
	return v1, v2, v3, err
}

func scanFourInt(sc *bufio.Scanner) (v1, v2, v3, v4 int, err error) {
	v1, err = scanInt(sc)
	if err == nil {
		v2, err = scanInt(sc)
	}
	if err == nil {
		v3, err = scanInt(sc)
	}
	if err == nil {
		v4, err = scanInt(sc)
	}
	return v1, v2, v3, v4, err
}

func scanInts(sc *bufio.Scanner, a []int) error {
	for i := range a {
		v, err := scanInt(sc)
		if err != nil {
			return err
		}
		a[i] = v
	}
	return nil
}

type Int interface {
	~int | ~int64 | ~int32 | ~int16 | ~int8
}

type writeOpts struct {
	sep byte
	end byte
}

func writeInt[I Int](bw *bufio.Writer, v I, opts writeOpts) error {
	var buf [32]byte

	_, err := bw.Write(strconv.AppendInt(buf[:0], int64(v), 10))

	if err == nil && opts.end != 0 {
		bw.WriteByte(opts.end)
	}

	return err
}

func writeInts[I Int](bw *bufio.Writer, a []I, opts writeOpts) error {
	var err error

	if len(a) != 0 {
		var buf [32]byte

		if opts.sep == 0 {
			opts.sep = ' '
		}

		_, err = bw.Write(strconv.AppendInt(buf[:0], int64(a[0]), 10))

		for i := 1; err == nil && i < len(a); i++ {
			err = bw.WriteByte(opts.sep)
			if err == nil {
				_, err = bw.Write(strconv.AppendInt(buf[:0], int64(a[i]), 10))
			}
		}
	}

	if err == nil && opts.end != 0 {
		err = bw.WriteByte(opts.end)
	}

	return err
}

var _, debugEnable = os.LookupEnv("DEBUG")

func main() {
	_ = debugEnable
	err := run(os.Stdin, os.Stdout)
	if err != nil {
		log.Fatal(err)
	}
}
